// –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∏–ª–∏
import './scss/styles.scss';

// –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã, –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –∫–ª–∞—Å—Å—ã
import { ApiService } from './components/apiService'
import { API_URL, CDN_URL } from './utils/constants';
import { ensureElement } from './utils/utils';
import { EventEmitter } from './components/base/events';
import { ProductModel } from './components/model/Product';
import { BasketModel } from './components/model/BasketModel';
import { OrderModel } from './components/model/OrderModel';
import { AppStateModel } from './components/model/AppState';
import { IEvents } from './types'; 
import { PageView } from './components/view/Page';
import { ModalView } from './components/view/Modal';
import { Card } from './components/view/Card';
import { OrderFormView } from './components/view/OrderFormView';
import { ContactsFormView } from './components/view/ContactsFormView';
import { OrderRequest, PaymentMethod } from './types';
import { SuccessView } from './components/view/SuccessView';
import { BasketView } from './components/view/BasketView';

// –∫–ª–∞—Å—Å –ø—Ä–µ–∑–µ–Ω—Ç–µ—Ä–∞
class MainPresenter {
private orderView: OrderFormView;
private contactsView: ContactsFormView;


constructor(
	private products: ProductModel,
	private basket: BasketModel,
	private order: OrderModel,
	private app: AppStateModel,
	private events: IEvents,
	private page: PageView,
	private modal: ModalView,
	private api: ApiService
) {
	this.registerEvents();
}

private registerEvents(): void {
	// –ö–∞—Ç–∞–ª–æ–≥ –∑–∞–≥—Ä—É–∂–µ–Ω ‚Üí –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω—É—é
	this.events.on('products:changed', () => {
		this.app.setState(null, true);
	});

		// üí° –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
	this.events.on('modal:null', ({ productsLoaded }) => {
		this.modal.render(null);
		this.page.render({ isLocked: false });

		// –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å –≥–ª–∞–≤–Ω—É—é —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–∞–ª–æ–≥–∞
		if (productsLoaded) {
			this.updatePage();
		}
	});
	
	// –¢–æ–≤–∞—Ä—ã
	// –û—Ç–∫—Ä—ã—Ç—å —Ç–æ–≤–∞—Ä
	this.events.on('product:open', ({ productId }) => {
		this.app.setState('product', false, productId);
	});
	
	this.events.on('modal:product', ({ productId }) => {
		const product = this.products.getProductById(productId);
		if (product) {
			const template = ensureElement<HTMLTemplateElement>('#card-preview');
			const container = template.content.firstElementChild!.cloneNode(true) as HTMLElement;
			const card = new Card(container, 'preview', this.events);
			this.modal.render(card.render({
				product,
				variant: 'preview',
				inBasket: this.isInBasket(product.id),
			}));
			this.page.render({ isLocked: true });
		}
	});

	// –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É
	this.events.on('product:add', ({ product }) => {
		this.basket.addItem(product);

        // –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ —Ç–æ–≤–∞—Ä–∞ ‚Äî –∑–∞–º–µ–Ω–∏—Ç—å –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞ —É–¥–∞–ª–∏—Ç—å
    	if (this.app.getModal() === 'product') {
			this.app.setState('product', false, product.id);
	}
	});

	// –£–¥–∞–ª–∏—Ç—å –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
	this.events.on('product:remove', ({ productId }) => {
		this.basket.removeItem(productId);

		// –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ —Ç–æ–≤–∞—Ä–∞ - –∑–∞–º–µ–Ω–∏—Ç—å –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–∏—Ç—å –Ω–∞ –¥–æ–±–∞–≤–∏—Ç—å
		if (this.app.getModal() === 'product') {
			this.app.setState('product', false, productId);
		}
	});

	// –ö–æ—Ä–∑–∏–Ω–∞
	// –û—Ç–∫—Ä—ã—Ç—å –∫–æ—Ä–∑–∏–Ω—É
	this.events.on('basket:open', () => {
		if (this.basket.getItems().length > 0) {
			this.app.setState('basket');
		}
	});
    
	this.events.on('modal:basket', () => {
		const template = ensureElement<HTMLTemplateElement>('#basket');
		const container = template.content.firstElementChild!.cloneNode(true) as HTMLElement;
		const view = new BasketView(container, this.events);
		this.modal.render(view.render({
			products: this.basket.getItems(),
			total: this.basket.getTotal()
		}));
		this.page.render({ isLocked: true });
	});

	// –ö–æ—Ä–∑–∏–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
	this.events.on('basket:changed', ({ items }) => {
		this.page.render({ basketCount: items.length });

        // –µ—Å–ª–∏ –º–æ–¥–∞–ª–∫–∞ —Å –∫–æ—Ä–∑–∏–Ω–æ–π –æ—Ç–∫—Ä—ã—Ç–∞ ‚Äî –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å
        if (this.app.getModal() === 'basket') {
			this.app.setState('basket');
        }
	});

	// –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
	// –®–∞–≥ 1: –¥–æ—Å—Ç–∞–≤–∫–∞ –∏ –æ–ø–ª–∞—Ç–∞
	// –û—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É
	this.events.on('order:open', () => {
		this.app.setState('order');
	});

	this.events.on('modal:order', () => {
		const template = ensureElement<HTMLTemplateElement>('#order');
		const container = template.content.firstElementChild!.cloneNode(true) as HTMLFormElement;
		this.orderView = new OrderFormView(container, this.events);

		const address = this.getAddress();
		const payment = this.getPayment();

		this.modal.render(this.orderView.render({
			address, 
			payment, 
			isValid: false })); // –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–Ω–æ–ø–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞

		this.page.render({ isLocked: true });


//			this.app.setStep('delivery');
this.order.validateOrder(address); // –æ–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
});


	// –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    this.events.on('order:update', ({ address }) => {
        this.order.validateOrder(address);
    });

	// –≤–æ–∑–≤—Ä–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    this.events.on('order:validation', ({ isValid }) => {
        this.orderView?.updateFormState(isValid);
    });

    // —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö, 
	this.events.on('order:submit', ({ address, payment }) => {
		this.order.setAddress(address);
		this.order.setPayment(payment);
		this.app.setState('contacts');
	});

	// –®–∞–≥ 2: –∫–æ–Ω—Ç–∞–∫—Ç—ã

	//–û—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É
	this.events.on('modal:contacts', () => {
		const template = ensureElement<HTMLTemplateElement>('#contacts');
		const container = template.content.firstElementChild!.cloneNode(true) as HTMLFormElement;
		this.contactsView = new ContactsFormView(container, this.events);

		const email = this.getEmail();
		const phone = this.getPhone();

		this.modal.render(this.contactsView.render({ 
			email, 
			phone, 
			isValid: false })); // –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–Ω–æ–ø–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞, —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç

		this.page.render({ isLocked: true });


//			this.app.setStep('contacts');
this.order.validateContacts(email, phone); //–æ–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∏ —Å–æ–æ–±—â–µ–Ω–∏—è
});


	// –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
	this.events.on('contacts:update', ({ email, phone }) => {
		this.order.validateContacts(email, phone);
	});

	// –≤–æ–∑–≤—Ä–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    this.events.on('contacts:validation', ({ isValid, isEmailValid, isPhoneValid }) => {

		let message = '';
		if (isEmailValid && !isPhoneValid) message = '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω';
		else if (!isEmailValid && isPhoneValid) message = '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email';
		else if (!isValid) message = ''; // —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∫–∞–∫–æ–µ –∏–∑ –ø–æ–ª–µ–π –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ


		this.contactsView?.updateFormState(isValid, message);


});


	// –æ—Ç–ø—Ä–∞–≤–∫–∞
	this.events.on('contacts:submit', (data) => {
		this.order.setContacts(data.email, data.phone);

		const request: OrderRequest = {
			address: this.getAddress(),
			payment: this.getPayment(),
			email: this.getEmail(),
			phone: this.getPhone(),
			items: this.basket.getItems().map((p) => p.id),
			total: this.basket.getTotal()
		};

		this.sendOrder(request);
	});

	// –£—Å–ø–µ—à–Ω—ã–π –∑–∞–∫–∞–∑
	this.events.on('modal:success', () => {
		const template = ensureElement<HTMLTemplateElement>('#success');
		const container = template.content.firstElementChild!.cloneNode(true) as HTMLElement;
		const view = new SuccessView(container, this.events);
		this.modal.render(view.render(this.basket.getTotal()));
		this.basket.clear();
		this.order.setPayment('card');
		this.order.setAddress('');
		this.order.setContacts('','');										 // 
		this.page.render({ isLocked: true }); //—Å–±—Ä–æ—Å –≥–∞–ª–µ—Ä–µ–∏ –∏ —Å—á–µ—Ç—á–∏–∫–∞
});


	this.events.on('success:close', () => {
			this.app.setState(null, false);
	});

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ª—é–±–æ–≥–æ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    this.events.on('modal:closed', () => {
    //    console.log('modal closed')
        this.page.render({ isLocked: false });
    });
}


private async sendOrder(request: OrderRequest): Promise<void> {
	try {
		await this.api.submitOrder(request);
		this.app.setState('success');


//			this.app.setStep('done');
} catch (error) {
console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞:', error);
alert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
}
}


private updatePage(): void {
	this.page.render({
		products: this.products.getProducts(),
		basketCount: this.basket.getItems().length
	});
}

// –•–µ–ª–ø–µ—Ä—ã –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º –∑–∞–∫–∞–∑–∞
private getAddress(): string {
	return (this.order as any).address;
}

private getPayment(): PaymentMethod {
	return (this.order as any).payment;
}

private getEmail(): string {
	return (this.order as any).email;
}

private getPhone(): string {
	return (this.order as any).phone;
}

private isInBasket(id: string): boolean {
	return this.basket.getItems().some((item) => item.id === id);
}


}

async function initApp(api: ApiService) {
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è EventEmitter
const events = new EventEmitter();


// –ú–æ–¥–µ–ª–∏
const productModel = new ProductModel(events);
const basketModel = new BasketModel(events);
const orderModel = new OrderModel(events);
const appState = new AppStateModel(events);

// DOM-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
const pageContainer = ensureElement<HTMLElement>('.page');
const modalContainer = ensureElement<HTMLElement>('#modal-container');

// –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
const pageView = new PageView(pageContainer, events);
const modalView = new ModalView(modalContainer, events);
modalView.render(null); // —Å–±—Ä–æ—Å –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ

// –ü—Ä–µ–∑–µ–Ω—Ç–µ—Ä
const presenter = new MainPresenter(
	productModel,
	basketModel,
	orderModel,
	appState,
	events,
	pageView,
	modalView,
	api
);


    const response = await api.getProducts();

    productModel.setProducts(response.items);


}

const api = new ApiService(CDN_URL, API_URL);

initApp(api);
